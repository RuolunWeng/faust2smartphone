#!/bin/bash

#####################################################################
#                                                                   #
#    Generates an API for Android or iOS based on a Faust object    #
#               (c) Allen and Grame, 2017                           #
#                                                                   #
#####################################################################

. faustpath

# change if you want to get the log of what's happening
# LOG="/dev/stdout"
LOG="/dev/null"

# exit if a command fails
set -e

# global option variables
ANDROID="0"
IOS="0"
IOSMOTION="0"
ANDROIDMOTION="0"
IOSPLUGIN="0"
ANDROIDPLUGIN="0"
NVOICES="12"
POLY2="0"
MIDI="0"
EFFECT=""
SOURCE=1
REUSE=0
INSTALL=0
OPTIONS=""
LIBMOTION=""
CHANGELIB=0
CUEMANAGER=0
SOUNDFILE="0"
OSCMOTIONCTRL="0"

echoHelp ()
{
	echo "===================================="
	echo "faust2smartphone - Musical Mobile App Project Generator"
	echo "It converts Faust to a ready-to-edit app project for Android or iOS."
	echo "===================================="
	echo "Usage: faust2smartphone '-option' xxx.dsp"
	echo "===================================="
	echo "Option: -ios for Xcode simple project"
	echo "Option: -iosmotion for Xcode project for smartSOLO"
	echo "Option: -iosplugin for Xcode project with faust plugin"
	echo "Option: -android for Android Studio simple project"
	echo "Option: -androidmotion for Android Studio project for smartSOLO"
	echo "Option: -androidplugin for Android Studio with faust plugin"
	echo "Option: -updatelib <.lib> for update motion library"
	echo "Option: -oscall/-oscalias for OSC support"
	echo "Option: -oscmotion for OSC-Motion"
	echo "Option: -nvoices: specify the max number of voices for MIDI"
	echo "Option: -soundfile for soundfile support"
	echo "Option: -cuemanager for using Cue Maneger system"
	echo "Option: -reuse for Uptade the project"
	echo "Option: -help for Help"
	echo "===================================="
}

echoVersion ()
{
	echo "===================================="
	echo "- faust2smartphone -"
	echo "===================================="
	echo "- Version: 0.8 -"
	echo "===================================="
}

###########################
# Processing Arguments
###########################

while [ $1 ]
do
	p=$1
	  if [ $p = "-v" ] ; then
	  echoVersion
		exit
	elif [ $p = "-help" ]; then
		echoHelp
	  exit
    elif [ $p = "-android" ]; then
		ANDROID=1
    elif [ $p = "-ios" ]; then
		IOS="1"
	elif [ $p = "-iosmotion" ]; then
		IOSMOTION="1"
	elif [ $p = "-oscmotion" ]; then
        OSCMOTIONCTRL="1"
	elif [ $p = "-androidmotion" ]; then
		ANDROIDMOTION="1"
	elif [ $p = "-iosplugin" ]; then
		IOSPLUGIN="1"
	elif [ $p = "-androidplugin" ]; then
		ANDROIDPLUGIN="1"
	elif [ $p = "-soundfile" ]; then
		SOUNDFILE="1"
	elif [ $p = "-reuse" ]; then
		REUSE=1
	elif [ $p = "-source" ]; then
		SOURCE=1
	elif [ $p = "-debug" ]; then
		LOG="/dev/stdout"
	elif [ $p = "-install" ]; then
		INSTALL=1
	elif [ $p = "-cuemanager" ]; then
		CUEMANAGER=1
    elif [ "$p" = "-effect" ]; then
        POLY2="1"
		shift
		if [[ -f "$1" ]]; then
			EFFECT=$1
		else
			echo "No file specified after -effect"
			echoHelp
			exit
		fi
	elif [ "$p" = "-updatelib" ]; then
        CHANGELIB="1"
		shift
		if [[ -f "$1" ]]; then
			LIBMOTION=$1
		else
			echo "No lib specified after -updatelib"
			echoHelp
			exit
		fi
  elif [ $p = "-nvoices" ]; then
		shift
		NVOICES=$1
  elif [ [${p:0:1} = "-"] ]; then
        OPTIONS="$OPTIONS $p"
	elif [[ -f "$p" ]]; then
		  	FILE="$p"
	else
			  OPTIONS="$OPTIONS $p"
	fi

	shift
done

if [ -z $FILE ]; then
    echo "Please, provide a Faust file to process"
    echoHelp
    exit
fi

###################################
# Configuring
###################################
CURRENTFOLDER=$(dirname "$p")
APPNAME=$(basename "$FILE")
APPNAME="${APPNAME%.dsp}"
BUILDDIR="faustSmartphone-$APPNAME"

# making sure that platform is set and generate corresponding global vars
if [ $ANDROID -eq 1 ]; then
	APPFOLDER="$BUILDDIR/app/src/main"
elif [ $ANDROIDMOTION -eq 1 ]; then
	APPFOLDER="$BUILDDIR/app/src/main"
elif [ $ANDROIDPLUGIN -eq 1 ]; then
	APPFOLDER="$BUILDDIR/app/src/main"
elif [ $IOS -eq 1 ]; then
	APPFOLDER="$BUILDDIR/iOS"
elif [ $IOSMOTION -eq 1 ]; then
	APPFOLDER="$BUILDDIR/iOS"
elif [ $IOSPLUGIN -eq 1 ]; then
	APPFOLDER="$BUILDDIR/iOS"
else
	echo "Please, specify a platform: -android -androidmotion -ios -iosmotion -iosplugin -androidplugin"
	echoHelp
	exit 1
fi

###############################
# Creating Default Project
###############################

if [ $REUSE -eq 0 ] || [ ! -d "$BUILDDIR" ]; then
	if [ -d "$BUILDDIR" ]; then # if BUILDIR exists, then delete it
		echo "Delete existing app project $BUILDDIR" > $LOG
		rm -rf "$BUILDDIR"
	fi

	# copying new template app if no reuse
	if [ ! -d "$BUILDDIR" ]; then
		mkdir -p "$BUILDDIR"
		if [ $ANDROID -eq 1 ]; then
			echo "Creating a new Android project in $BUILDDIR" > $LOG
			echo "option==$OPTIONS" > $LOG
			cp -r $FAUSTLIB/smartphone/android/* "$BUILDDIR"
			cp -r $FAUSTLIB/smartphone/compile "$CURRENTFOLDER"

			# change 'faust' with real *APPNAME
			PLATFORM=$(uname)

			if [ $PLATFORM = "Darwin" ]; then
				sed -i '' 's,com.allensmartfaust.faustapi,com.'$APPNAME',g' $BUILDDIR/app/build.gradle
				sed -i '' 's,com.allensmartfaust.faustapi,com.'$APPNAME',g' $APPFOLDER/java/com/allensmartfaust/faustapi/*
				sed -i '' 's,com.allensmartfaust.faustapi,com.'$APPNAME',g' $APPFOLDER/AndroidManifest.xml
				sed -i '' 's,com.allensmartfaust.faustapi,com.'$APPNAME',g' $APPFOLDER/res/layout/activity_main.xml
				sed -i '' 's,FaustAPI,'$APPNAME',g' $APPFOLDER/res/values/strings.xml
				if [[ $OPTIONS = " -oscall" ]]; then
					echo "osc" > $LOG
					sed -i '' 's,OSCCTRL=false,OSCCTRL=true,g' $BUILDDIR/app/build.gradle
					sed -i '' 's,set(OSCCTRL\ false),set(OSCCTRL\ true),g' $BUILDDIR/app/CMakeLists.txt
				elif [[ $OPTIONS = " -oscalias" ]]; then
					echo "osc" > $LOG
					sed -i '' 's,OSCCTRL=false,OSCCTRL=true,g' $BUILDDIR/app/build.gradle
					sed -i '' 's,set(OSCCTRL\ false),set(OSCCTRL\ true),g' $BUILDDIR/app/CMakeLists.txt
				else
					echo "noosc" > $LOG
				fi
				if [ "$SOUNDFILE" = "1" ]; then
					echo "soundfile" > $LOG
					sed -i '' 's,SOUNDFILE=false,SOUNDFILE=true,g' $BUILDDIR/app/build.gradle
					sed -i '' 's,set(SOUNDFILE\ false),set(SOUNDFILE\ true),g' $BUILDDIR/app/CMakeLists.txt

				else
					echo "no soundfile" > $LOG
				fi
			else
				sed -i 's,com.allensmartfaust.faustapi,com.'$APPNAME',g' $BUILDDIR/app/build.gradle
				sed -i 's,com.allensmartfaust.faustapi,com.'$APPNAME',g' $APPFOLDER/java/com/allensmartfaust/faustapi/*
				sed -i 's,com.allensmartfaust.faustapi,com.'$APPNAME',g' $APPFOLDER/AndroidManifest.xml
				sed -i 's,com.allensmartfaust.faustapi,com.'$APPNAME',g' $APPFOLDER/res/layout/activity_main.xml
				sed -i 's,FaustAPI,'$APPNAME',g' $APPFOLDER/res/values/strings.xml
				if [[ $OPTIONS = " -oscall" ]]; then
					echo "osc" > $LOG
					sed -i '' 's,OSCCTRL=false,OSCCTRL=true,g' $BUILDDIR/app/build.gradle
					sed -i '' 's,set(OSCCTRL\ false),set(OSCCTRL\ true),g' $BUILDDIR/app/CMakeLists.txt
				elif [[ $OPTIONS = " -oscalias" ]]; then
					echo "osc" > $LOG
					sed -i '' 's,OSCCTRL=false,OSCCTRL=true,g' $BUILDDIR/app/build.gradle

				else
					echo "noosc" > $LOG
				fi
				if [ "$SOUNDFILE" = "1" ]; then
					echo "soundfile" > $LOG
					ed -i '' 's,SOUNDFILE=false,SOUNDFILE=true,g' $BUILDDIR/app/build.gradle
					sed -i '' 's,set(SOUNDFILE\ false),set(SOUNDFILE\ true),g' $BUILDDIR/app/CMakeLists.txt

				else
					echo "no soundfile" > $LOG
				fi
			fi
			mv $APPFOLDER/java/com/allensmartfaust/faustapi $APPFOLDER/java/com/allensmartfaust/$APPNAME

		elif [ $ANDROIDMOTION -eq 1 ]; then
			echo "Creating a new Android project for smartSOLO in $BUILDDIR" > $LOG
			cp -r $FAUSTLIB/smartphone/android-motion/* "$BUILDDIR"
			cp -r $FAUSTLIB/smartphone/compile "$CURRENTFOLDER"
			if [ $CUEMANAGER -eq 1 ]; then
			cp -r $FAUSTLIB/smartphone/cueAndroid/* "$CURRENTFOLDER"
		  fi
			# change 'faust' with real *APPNAME
			PLATFORM=$(uname)

			if [ $PLATFORM = "Darwin" ]; then
				sed -i '' 's,com.allensmartfaust.faustapi,com.'$APPNAME',g' $BUILDDIR/app/build.gradle
				sed -i '' 's,com.allensmartfaust.faustapi,com.'$APPNAME',g' $APPFOLDER/java/com/allensmartfaust/faustapi/*
				sed -i '' 's,com.allensmartfaust.faustapi,com.'$APPNAME',g' $APPFOLDER/AndroidManifest.xml
				sed -i '' 's,com.allensmartfaust.faustapi,com.'$APPNAME',g' $APPFOLDER/res/layout/activity_main.xml
				sed -i '' 's,FaustAPI,'$APPNAME',g' $APPFOLDER/res/values/strings.xml
				if [[ $OPTIONS = " -oscall" ]]; then
					echo "osc" > $LOG
					sed -i '' 's,OSCCTRL=false,OSCCTRL=true,g' $BUILDDIR/app/build.gradle
					sed -i '' 's,set(OSCCTRL\ false),set(OSCCTRL\ true),g' $BUILDDIR/app/CMakeLists.txt
				elif [[ $OPTIONS = " -oscalias" ]]; then
					echo "osc" > $LOG
					sed -i '' 's,OSCCTRL=false,OSCCTRL=true,g' $BUILDDIR/app/build.gradle
					sed -i '' 's,set(OSCCTRL\ false),set(OSCCTRL\ true),g' $BUILDDIR/app/CMakeLists.txt
				else
					echo "noosc" > $LOG
				fi
				if [ "$SOUNDFILE" = "1" ]; then
					echo "soundfile" > $LOG
					sed -i '' 's,SOUNDFILE=false,SOUNDFILE=true,g' $BUILDDIR/app/build.gradle
					sed -i '' 's,set(SOUNDFILE\ false),set(SOUNDFILE\ true),g' $BUILDDIR/app/CMakeLists.txt

				else
					echo "no soundfile" > $LOG
				fi
			else
				sed -i 's,com.allensmartfaust.faustapi,com.'$APPNAME',g' $BUILDDIR/app/build.gradle
				sed -i 's,com.allensmartfaust.faustapi,com.'$APPNAME',g' $APPFOLDER/java/com/allensmartfaust/faustapi/*
				sed -i 's,com.allensmartfaust.faustapi,com.'$APPNAME',g' $APPFOLDER/AndroidManifest.xml
				sed -i 's,com.allensmartfaust.faustapi,com.'$APPNAME',g' $APPFOLDER/res/layout/activity_main.xml
				sed -i 's,FaustAPI,'$APPNAME',g' $APPFOLDER/res/values/strings.xml
				if [[ $OPTIONS = " -oscall" ]]; then
					echo "osc" > $LOG
					sed -i '' 's,OSCCTRL=false,OSCCTRL=true,g' $BUILDDIR/app/build.gradle
					sed -i '' 's,set(OSCCTRL\ false),set(OSCCTRL\ true),g' $BUILDDIR/app/CMakeLists.txt
				elif [[ $OPTIONS = " -oscalias" ]]; then
					echo "osc" > $LOG
					sed -i '' 's,OSCCTRL=false,OSCCTRL=true,g' $BUILDDIR/app/build.gradle
					sed -i '' 's,set(OSCCTRL\ false),set(OSCCTRL\ true),g' $BUILDDIR/app/CMakeLists.txt
				else
					echo "noosc" > $LOG
				fi
				if [ "$SOUNDFILE" = "1" ]; then
					echo "soundfile" > $LOG
					ed -i '' 's,SOUNDFILE=false,SOUNDFILE=true,g' $BUILDDIR/app/build.gradle
					sed -i '' 's,set(SOUNDFILE\ false),set(SOUNDFILE\ true),g' $BUILDDIR/app/CMakeLists.txt

				else
					echo "no soundfile" > $LOG
				fi
			fi
			mv $APPFOLDER/java/com/allensmartfaust/faustapi $APPFOLDER/java/com/allensmartfaust/$APPNAME

		elif [ $ANDROIDPLUGIN -eq 1 ]; then
			echo "Creating a new Android project for Faust Plugin in $BUILDDIR" > $LOG
			cp -r $FAUSTLIB/smartphone/android-plugin/* "$BUILDDIR"
			cp -r $FAUSTLIB/smartphone/compile "$CURRENTFOLDER"
			# change 'faustapi' with real *APPNAME
			PLATFORM=$(uname)

			if [ $PLATFORM = "Darwin" ]; then
				sed -i '' 's,com.allensmartfaust.faustapi,com.'$APPNAME',g' $BUILDDIR/app/build.gradle
				sed -i '' 's,com.allensmartfaust.faustapi,com.'$APPNAME',g' $APPFOLDER/java/com/allensmartfaust/faustapi/*
				sed -i '' 's,com.allensmartfaust.faustapi,com.'$APPNAME',g' $APPFOLDER/AndroidManifest.xml
				sed -i '' 's,com.allensmartfaust.faustapi,com.'$APPNAME',g' $APPFOLDER/res/layout/activity_main.xml
				sed -i '' 's,FaustAPI,'$APPNAME',g' $APPFOLDER/res/values/strings.xml
				if [[ $OPTIONS = " -oscall" ]]; then
					echo "osc" > $LOG
					sed -i '' 's,OSCCTRL=false,OSCCTRL=true,g' $BUILDDIR/app/build.gradle
					sed -i '' 's,set(OSCCTRL\ false),set(OSCCTRL\ true),g' $BUILDDIR/app/CMakeLists.txt
				elif [[ $OPTIONS = " -oscalias" ]]; then
					echo "osc" > $LOG
					sed -i '' 's,OSCCTRL=false,OSCCTRL=true,g' $BUILDDIR/app/build.gradle
					sed -i '' 's,set(OSCCTRL\ false),set(OSCCTRL\ true),g' $BUILDDIR/app/CMakeLists.txt
				else
					echo "noosc" > $LOG
				fi
				if [ "$SOUNDFILE" = "1" ]; then
					echo "soundfile" > $LOG
					sed -i '' 's,SOUNDFILE=false,SOUNDFILE=true,g' $BUILDDIR/app/build.gradle
					sed -i '' 's,set(SOUNDFILE\ false),set(SOUNDFILE\ true),g' $BUILDDIR/app/CMakeLists.txt

				else
					echo "no soundfile" > $LOG
				fi
			else
				sed -i 's,com.allensmartfaust.faustapi,com.'$APPNAME',g' $BUILDDIR/app/build.gradle
				sed -i 's,com.allensmartfaust.faustapi,com.'$APPNAME',g' $APPFOLDER/java/com/allensmartfaust/faustapi/*
				sed -i 's,com.allensmartfaust.faustapi,com.'$APPNAME',g' $APPFOLDER/AndroidManifest.xml
				sed -i 's,com.allensmartfaust.faustapi,com.'$APPNAME',g' $APPFOLDER/res/layout/activity_main.xml
				sed -i 's,FaustAPI,'$APPNAME',g' $APPFOLDER/res/values/strings.xml
				if [[ $OPTIONS = " -oscall" ]]; then
					echo "osc" > $LOG
					sed -i '' 's,OSCCTRL=false,OSCCTRL=true,g' $BUILDDIR/app/build.gradle
					sed -i '' 's,set(OSCCTRL\ false),set(OSCCTRL\ true),g' $BUILDDIR/app/CMakeLists.txt
				elif [[ $OPTIONS = " -oscalias" ]]; then
					echo "osc" > $LOG
					sed -i '' 's,OSCCTRL=false,OSCCTRL=true,g' $BUILDDIR/app/build.gradle
					sed -i '' 's,set(OSCCTRL\ false),set(OSCCTRL\ true),g' $BUILDDIR/app/CMakeLists.txt
				else
					echo "noosc" > $LOG
				fi
				if [ "$SOUNDFILE" = "1" ]; then
					echo "soundfile" > $LOG
					sed -i '' 's,SOUNDFILE=false,SOUNDFILE=true,g' $BUILDDIR/app/build.gradle
					sed -i '' 's,set(SOUNDFILE\ false),set(SOUNDFILE\ true),g' $BUILDDIR/app/CMakeLists.txt

				else
					echo "no soundfile" > $LOG
				fi
			fi
			mv $APPFOLDER/java/com/allensmartfaust/faustapi $APPFOLDER/java/com/allensmartfaust/$APPNAME

		elif [ $IOS -eq 1 ]; then
			echo "Creating a new iOS project in $BUILDDIR" > $LOG
			cp -r $FAUSTLIB/smartphone/iOS/* "$BUILDDIR"
			cp -r $FAUSTLIB/osclib/faust $BUILDDIR/osclib
			cp -r $FAUSTLIB/osclib/oscpack $BUILDDIR/osclib
			cp -r $FAUSTLIB/smartphone/compile "$CURRENTFOLDER"
			sed -i '' 's,$(TARGET_NAME),'$APPNAME',g' $BUILDDIR/iOS.xcodeproj/project.pbxproj
			sed -i '' 's,com.AllenSmartFaust,com.AllenSmartFaust.'$APPNAME',g' $BUILDDIR/IOS.xcodeproj/project.pbxproj
		elif [ $IOSPLUGIN -eq 1 ]; then
			echo "Creating a new iOS FAUST PLUGIN project in $BUILDDIR" > $LOG
			cp -r $FAUSTLIB/smartphone/iOS-plugin/* "$BUILDDIR"
			cp -r $FAUSTLIB/smartphone/compile "$CURRENTFOLDER"
			cp -r $FAUSTLIB/osclib/faust $BUILDDIR/osclib
			cp -r $FAUSTLIB/osclib/oscpack $BUILDDIR/osclib
			sed -i '' 's,$(TARGET_NAME),'$APPNAME',g' $BUILDDIR/iOS.xcodeproj/project.pbxproj
			sed -i '' 's,com.AllenSmartFaust,com.AllenSmartFaust.'$APPNAME',g' $BUILDDIR/IOS.xcodeproj/project.pbxproj
		elif [ $IOSMOTION -eq 1 ]; then
			echo "Creating a new iOS project with motion support in $BUILDDIR" > $LOG
			cp -r $FAUSTLIB/smartphone/iOS-motion/* "$BUILDDIR"
			cp -r $FAUSTLIB/osclib/faust $BUILDDIR/osclib
			cp -r $FAUSTLIB/osclib/oscpack $BUILDDIR/osclib
			cp -r $FAUSTLIB/smartphone/compile "$CURRENTFOLDER"
			if [ $CUEMANAGER -eq 1 ]; then
			cp -r $FAUSTLIB/smartphone/cueiOS/* "$CURRENTFOLDER"
			fi
			sed -i '' 's,$(TARGET_NAME),'$APPNAME',g' $BUILDDIR/iOS.xcodeproj/project.pbxproj
			sed -i '' 's,com.AllenSmartFaust,com.AllenSmartFaust.'$APPNAME',g' $BUILDDIR/IOS.xcodeproj/project.pbxproj
		fi
	fi
fi

###########################
# Adding DSP
###########################

if [ $ANDROID -eq 1 ]; then
	if [ -z "$EFFECT" ]; then # no effect
	if [ "$SOUNDFILE" = "1" ]; then
		echo "Adding DSP with soundfile support to the app" > $LOG
		faust2api_a $OPTIONS -android -soundfile -nodoc "$FILE" > $LOG
	else
		echo "Adding DSP with no effect chain to the app" > $LOG
		faust2api_a $OPTIONS -android -nodoc "$FILE" > $LOG
	fi
	else
		echo "Adding DSP with effect chain to the app" > $LOG
		faust2api_a $OPTIONS -android -nvoices "$NVOICES" -effect "$EFFECT" -nodoc "$FILE" > $LOG
	fi
	unzip "dsp-faust.zip" > $LOG
	mv "dsp-faust" "$BUILDDIR"
	rm "dsp-faust.zip"
	cp -r "$BUILDDIR/dsp-faust/cpp" "$APPFOLDER"
	#cp $BUILDDIR/dsp-faust/java/* "$APPFOLDER/java/com/DspFaust"
	rsync --delete -a $BUILDDIR/dsp-faust/java/* "$APPFOLDER/java/com/DspFaust"
	rm -r "$BUILDDIR/dsp-faust"

elif [ $ANDROIDMOTION -eq 1 ]; then
	if [ "$SOUNDFILE" = "1" ]; then
		echo "Adding DSP with soundfile support to the motion support app" > $LOG
		faust2api_a $OPTIONS -androidmotion -soundfile -nodoc "$FILE" > $LOG
	else
		echo "Adding DSP to the plugin support app" > $LOG
		faust2api_a $OPTIONS -androidmotion -nodoc "$FILE" > $LOG
	fi
	unzip "dsp-faust.zip" > $LOG
	mv "dsp-faust" "$BUILDDIR"
	rm "dsp-faust.zip"
	cp -r "$BUILDDIR/dsp-faust/cpp" "$APPFOLDER"
	#cp $BUILDDIR/dsp-faust/java/* "$APPFOLDER/java/com/DspFaust"
	rsync --delete -a $BUILDDIR/dsp-faust/java/* "$APPFOLDER/java/com/DspFaust" > $LOG
	rm -r "$BUILDDIR/dsp-faust"
	if [ $CHANGELIB -eq 1 ]; then
	echo "Updating motion lib for the app" > $LOG
	faust -lang ocpp -i -a $FAUSTLIB/api-allen/motion/DspFaustMotion.cpp -cn mydsp2 "$LIBMOTION" -o "$APPFOLDER/cpp/DspFaustMotion.cpp" > $LOG
  sed -i '' '/delete reinterpret_cast<FaustPolyEngine*/, /getScreenColor/ d' "$APPFOLDER/cpp/DspFaustMotion.cpp" > $LOG
	sed -i '' '/__dsp_algebra_api__/, /endif/ d' "$APPFOLDER/cpp/DspFaustMotion.cpp" > $LOG
	fi

elif [ $ANDROIDPLUGIN -eq 1 ]; then
	echo "Adding DSP with motion support to the app" > $LOG
		faust2api_a $OPTIONS -androidplugin -nodoc "$FILE" > $LOG
	unzip "dsp-faust.zip" > $LOG
	mv "dsp-faust" "$BUILDDIR"
	rm "dsp-faust.zip"
	cp -r "$BUILDDIR/dsp-faust/cpp" "$APPFOLDER"
	cp $BUILDDIR/dsp-faust/java/* "$APPFOLDER/java/com/DspFaust"
	rm -r "$BUILDDIR/dsp-faust"

elif [ $IOS -eq 1 ]; then
	if [ -z "$EFFECT" ]; then # no effect
	  if [ "$SOUNDFILE" = "1" ]; then
		  echo "Adding DSP with soundfile support to the app" > $LOG
		  faust2api_a $OPTIONS -ios -soundfile -nodoc "$FILE" > $LOG
	  else
			echo "Adding DSP with no effect chain to the app" > $LOG
			faust2api_a $OPTIONS -ios -nodoc "$FILE" > $LOG
		fi
	else
		echo "Adding DSP with effect chain to the app" > $LOG
		faust2api_a $OPTIONS -ios -midi -nvoices "$NVOICES" -effect "$EFFECT" -nodoc "$FILE" > $LOG
	fi
	unzip "dsp-faust.zip" > $LOG
	mv "dsp-faust" "$BUILDDIR"
	rm "dsp-faust.zip"
	cp $BUILDDIR/dsp-faust/* "$APPFOLDER"
	rm -r "$BUILDDIR/dsp-faust"

elif [ $IOSPLUGIN -eq 1 ]; then
	if [ "$SOUNDFILE" = "1" ]; then
		echo "Adding DSP with soundfile support to the plugin support app" > $LOG
		faust2api_a $OPTIONS -iosplugin -soundfile -nodoc "$FILE" > $LOG
	else
		echo "Adding DSP to the plugin support app" > $LOG
		faust2api_a $OPTIONS -iosplugin -nodoc "$FILE" > $LOG
	fi
	unzip "dsp-faust.zip" > $LOG
	mv "dsp-faust" "$BUILDDIR"
	rm "dsp-faust.zip"
	cp $BUILDDIR/dsp-faust/* "$APPFOLDER"
	rm -r "$BUILDDIR/dsp-faust"

elif [ $IOSMOTION -eq 1 ]; then
	if [ "$SOUNDFILE" = "1" ]; then
		echo "Adding DSP with soundfile support to the motion support app" > $LOG
		faust2api_a $OPTIONS -iosmotion -soundfile -nodoc "$FILE" > $LOG
	else
		echo "Adding DSP to the plugin support app" > $LOG
		faust2api_a $OPTIONS -iosmotion -nodoc "$FILE" > $LOG
	fi
	unzip "dsp-faust.zip" > $LOG
	mv "dsp-faust" "$BUILDDIR"
	rm "dsp-faust.zip"
	cp $BUILDDIR/dsp-faust/* "$APPFOLDER"
	rm -r "$BUILDDIR/dsp-faust"
	if [ $CHANGELIB -eq 1 ]; then
	echo "Updating motion lib for the app" > $LOG
	faust -lang ocpp -i -a $FAUSTLIB/api-allen/motion/DspFaustMotion.cpp -cn mydsp2 "$LIBMOTION" -o "$APPFOLDER/DspFaustMotion.cpp" > $LOG
	sed -i '' '/delete reinterpret_cast<FaustPolyEngine*/, /getScreenColor/ d' "$APPFOLDER/DspFaustMotion.cpp" > $LOG
     echo "#define TARGET_OS_IPHONE 1" | cat - "$APPFOLDER/DspFaustMotion.cpp" > temp && mv temp "$APPFOLDER/DspFaustMotion.cpp" > $LOG
	fi
	if [ "$OSCMOTIONCTRL" = "1" ]; then
	sed -i '' 's,GUI::updateAllGuis(),'//',g' $APPFOLDER/DspFaust.cpp
    echo "#define OSCCTRL 1" | cat - "$APPFOLDER/DspFaustMotion.cpp" > temp && mv temp "$APPFOLDER/DspFaustMotion.cpp"
	fi
fi


###########################
# Cleaning
###########################

if [ $REUSE -eq 0 ] && [ $SOURCE -eq 0 ]; then
	echo "Delete app project $BUILDDIR" > $LOG
	rm -rf $BUILDDIR
else
	echo "========================================================"
	echo "An app project $BUILDDIR was created or updated"
	echo "A compile file was created. [Compile APP after edit the project]"
	if [ "$SOUNDFILE" = "1" ]; then
	echo "=============!!Warning!!============="
	echo "you have to manually add the needed soundfiles in the project"
	echo "Drag your songs in Xcode or Android studio/app/src/main/assets folder"
	echo "=============!!Warning!!============="
	fi
	echo "========================================================"
fi
