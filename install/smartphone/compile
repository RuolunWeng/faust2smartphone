#!/bin/bash
#####################################################################
#                                                                   #
#               Compiles Faust programs to iOS applications     #
#               (c) Allen, 2017                                    #
#                                                                   #
#####################################################################

# exit if a command fails
set -e

# global option variables
ANDROID="0"
IOS="0"
LOG="/dev/stdout"

#########################################
#PHASE 1 : collects file name from the command line
#########################################

while [ $1 ]
do
    p=$1

    if [ $p = "-help" ] || [ $p = "-h" ]; then
        echo "===================================="
        echo "Use './compile -ios XXX' to compile app for iOS"
		echo "Use './compile -android XXX' to compile app for Android"
		echo "===================================="
        exit
    elif [ $p = "-android" ]; then
		ANDROID=1
    elif [ $p = "-ios" ]; then
		IOS=1
    elif [ ${p:0:1} != "-" ]; then
		FILES="$p"
    else
    	echo "===================================="
        echo "$p wrong argument"
		echo "Use './compile -ios XXX' to compile app for iOS"
		echo "Use './compile -android XXX' to compile app for Android"
		echo "===================================="
		exit
    fi


shift
done

if [ $IOS -eq 0 ] && [ $ANDROID -eq 0 ]; then
	echo "===================================="
    echo "Please, specify a platform: -android or -ios"
    echo "===================================="
elif [ -z $FILES ]; then
	echo "===================================="
    echo "Please, provide app's name to compile"
    echo "===================================="
    exit
fi


#########################################
#PHASE 2 : compile file
#########################################


for p in $FILES; do
	S=$(dirname "$p")      #CURRENT FOLDER
	F=$(basename "$p")
	P=${F%.dsp}             #APP NAME

	T="faustSmartphone.$P"

     if [ $ANDROID -eq 1 ]; then
		echo "Starting Android compilation"
		echo "Wait...."
		cd $T
		./gradlew assembleRelease > $LOG || exit
		cd ..		
		cp -r $T/app/build/outputs/apk/release/app-release.apk $P.apk > $LOG
		echo "===================================="
		echo "An Android app \"$P.apk\" was created in the current folder"
		echo "===================================="
	 elif [ $IOS -eq 1 ]; then

        echo "Compile with Xccode"
        echo "Wait...."
        (
            xcodebuild -project "$T/iOS.xcodeproj" -target FaustAPI PRODUCT_NAME=$P
            cd "$T" && xcodebuild -scheme FaustAPI archive PRODUCT_NAME=$P
        ) > $LOG || exit

        # move generated app to source directory
        rm -rf "$S/$P.app"
        mv "$T/build/Release-iphoneos/$P.app" "$S/"

	    # collect binary file name for FaustGIDE
        BINARIES="$BINARIES$P.app;"
        echo "===================================="
        echo "An iOS app \"$BINARIES\" was created in the current folder"
        echo "===================================="
    fi
done
